<?php
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link      http://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link http://book.cakephp.org/3.0/en/controllers.html#the-app-controller
 */
class TestController extends AppController {
    public function beforeFilter(Event $event)
    {
//        $this->Files = TableRegistry::get('Files');
        $this->loadModel('OldFiles');
        $this->loadModel('Files');
        $this->loadModel('OldCategories');
        $this->loadModel('Tags');
        $this->loadModel('OldAssociations');
        $this->loadModel('FilesTags');
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    public function migrateFiles(){
        $this->Files->deleteAll([1 => 1]);

        $tmp = $this->OldFiles->find('all');
        foreach ($tmp as $item){
            $aUpdateData = array(
                'id' => $item->f_id,
                'filename' => $item->f_filename,
                'last_viewed' => $item->f_last_viewed,
                'needs_tagging' => ($item->f_need_tagging == 'Y'),
                'cnt_views' => $item->f_views
            );
            $e = $this->Files->newEntity($aUpdateData);
            $this->Files->save($e);
        }
    }

    public function migrateTags(){
        $this->Tags->deleteAll([1 => 1]);

        $tmp = $this->OldCategories->find('all');
        foreach ($tmp as $item){
            $aUpdateData = array(
                'id' => $item->c_id,
                'name' => $item->c_name,
                'navigation' => $item->c_navigation
            );
            $e = $this->Tags->newEntity($aUpdateData);
            $this->Tags->save($e);
        }
    }

    public function migrateAssociations(){
        set_time_limit(0);

        $this->FilesTags->deleteAll([1 => 1]);

        $tmp = $this->OldAssociations->find('all');
        print "here with count: " . $tmp->count() . "<br />";

        for ($i = 0; $i < $tmp->count(); $i += 100){
            $tmp = $this->OldAssociations->find('all', array(
                'offset' => $i,
                'limit' => 100
            ));
            $aBatchUpdate = array();
            foreach ($tmp as $idx => $item){
                try {
                    $this->Files->get($item->f_id);
                }
                catch (Exception $e){
                    continue;
                }

                $bExists = $this->Tags->find('all', array(
                    'conditions' => array(
                        'Tags.id' => $item->c_id
                    )
                ));
                if ($bExists->count() == 0) continue;

                $aUpdateData = array(
                    'file_id' => $item->f_id,
                    'tag_id' => $item->c_id,
                );
                $e = $this->FilesTags->newEntity($aUpdateData);
                $this->FilesTags->save($e);
            }

//            $es = $this->FilesTags->newEntities($aBatchUpdate);
//            foreach ($es as $e){
//                $this->FilesTags->save($e);
//            }

            print "page $i done<br />\n";
        }
    }
}
